
// Project		EMMA
// Entity		Registers unit
// File		registers.hase
// Date:		28 May 2003, updated Mar 2020

// The Registers unit  contains 16 registers, R0-15; R0 always contains 0.
// It has one data input, two data outputs and an instruction/control input.
// 
// The instruction/control input word (c_input) contains 4 characters:
//
//	character 0-  Control bits taken from bits 16, 17, 18, 19 of the microcode word:
// 		bit 0 - (value 8) swap bit
// 		bit 1 - (value 4) controls data input
//		bit 2 - (value 2) controls output1
//		bit 3 - (value 1) controls output2
//	character 1 - Destination Register (RD) address
// 	character 2 - Source Register 1 (RS1) address
//	character 3 - Source Register 2 (RS2) address
//
// On receipt of a control input: 
//	
//	each input character is converted to its hex value: control, dest_reg, src_reg1, src_reg2
//	if control bit 2 is set, 
//		the value of src_reg1 is read from the register array and sent to output 1
//	if control bit 3 is set and control bit 0 = 0,
//		the value of src_reg2 is read from the register array and sent to output 2
//	if control bit 3 is set and control bit 0 = 1,
//		the value of dest_reg is read from the register array and sent to output 2
//	if control bit 1 is set and control bit 0 = 0,
//		the value received on the data input is written to the register selected by dest_reg
//	if control bit 1 is set and control bit 0 = 1,
//		the value received on the data input is written to the register selected by src_reg1

$class_decls

//structures and variables

  int i;
  int old_state;
  int dest_reg, src_reg1, src_reg1_value, src_reg2, src_reg2_value;
  int control;
  int d_input;
  int result1, result2;

  t_four_ch c_input;
  t_prog_reg update;

//classes

$class_defs

$pre

  control = 0;
  my_state = R_IDLE;
  old_state = R_IDLE;
  dump_state();
  d_input = 0;
  update.reg_value = 0;
  for (i=0; i<16; i++)
    {Registers.Update(i, update);}

$phase0

// predicates for use in sim_waiting test

  sim_from_port C_Input(control_input);	    
  sim_from_port D_Input(data_input);	    

    // DEAL WITH INPUT

  if  (sim_waiting(ev, C_Input) > 0)
     {
	SIM_CAST_DEL(t_four_ch, c_input, ev);
	strcpy (RCODE, c_input.s4);
	control  = char_to_hex(c_input.s4[0]);
	dest_reg = hex_to_int(c_input.s4[1]);
	src_reg1 = hex_to_int(c_input.s4[2]);
	src_reg2 = hex_to_int(c_input.s4[3]);

     }

// set unit READ busy if either of its output control bits is 1
// and set void/active state in display

  if (((control & 1) == 1) || ((control & 2) == 2))
	  {my_state = R_READ;}
  else if ((control & 4) == 4)
	  {my_state = R_WRITE;}
  else
	  {my_state = R_IDLE;}

	 if (my_state != old_state)
	  {dump_state();
	   old_state = my_state;}
  if  (sim_waiting(ev, D_Input) > 0)
     {
	SIM_CAST_DEL( int, d_input, ev);
//	data_input = D_input;
     }

// If control bit 2 == 1,  result 1 = src_reg1

  if ( (control & 2) == 2) 
	{result1 = Registers[src_reg1].reg_value;}

// If control bit 3 = 1 and control bit 0 (swap bit) = 0, result 2 = src_reg2

  if ( ((control & 1) == 1) && ((control & 8) == 0) )
	{result2 = Registers[src_reg2].reg_value;}

// If control bit 3 =1 and control bit 0 (swap bit) = 1, result 2 = dest_reg

  if ( ((control & 8) == 8) && ((control & 1) == 1) )
	{result2 = Registers[dest_reg].reg_value;}


// If input control bit 1 = 1 and control bit 0 = 0, write value to dest_reg, except for R0 which is always 0

  if ( ((control & 4) == 4) && ((control & 8) == 0) )
	{update.reg_value = d_input;
	 if (dest_reg == 0)
	  {update.reg_value = 0;}
	  Registers.Update(dest_reg, update);
	}

// If input control bit 1 = 1 and control bit 0 = 1, write value to src_reg1, except for R0 which is always 0

  if ( ((control & 4) == 4) && ((control & 8) == 8) )
	{update.reg_value = d_input;
	 if (src_reg1 == 0)
	  {update.reg_value = 0;}
	  Registers.Update(src_reg1, update);
	}

	// end of ClockPhase = 0

$phase1

// If output1 control bit = 1, send Source Register 1 value to output 1

 if ((control & 2) == 2)
	  {send_RESULT(output1, result1);}

// If output2 control bit = 1, send Source Register 2 value to output 2

 if ((control & 1) == 1)
	  {send_RESULT(output2, result2);}
  control = 0;
	// end of  ClockPhase 1



